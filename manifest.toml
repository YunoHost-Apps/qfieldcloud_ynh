packaging_format = 2

id = "qfieldcloud"
name = "QFieldCloud"

description.en = "Web server to synchronize projects and data between QGIS and QField. It allows seamless synchronization of your field data with change tracking, team management and online-offline work capabilities."
description.fr = "Un serveur web qui permet de synchroniser les projets et les données entre QGIS et QField. Il permet une synchronisation transparente de vos données de terrain avec le suivi des changements, la gestion des équipes et les capacités de travail en ligne et hors ligne."

version = "0.22.2~ynh1"

maintainers = ["Lapineige"]

[upstream]
# NB: Only the "license" key is mandatory. Remove entries for which there's no relevant data
license = "MIT"
website = "https://qfield.cloud/"
demo = ""
admindoc = ""
userdoc = "https://docs.qfield.org/get-started/tutorials/get-started-qfc/"
code = "https://github.com/opengisch/qfieldcloud"
# FIXME: optional but recommended if relevant, this is meant to contain the Common Platform Enumeration, which is sort of a standard id for applications defined by the NIST. In particular, YunoHost may use this is in the future to easily track CVE (=security reports) related to apps. The CPE may be obtained by searching here: https://nvd.nist.gov/products/cpe/search. For example, for Nextcloud, the CPE is 'cpe:2.3:a:nextcloud:nextcloud' (no need to include the version number)
cpe = "???"
# FIXME: optional but recommended (or remove if irrelevant / not applicable). This is meant to be an URL where people can financially support this app, especially when its development is based on volunteers and/or financed by its community. YunoHost may later advertise it in the webadmin.
fund = "???"


[integration]
yunohost = ">= 11.1.21"
# List of supported archs using the dpkg --print-architecture nomenclature (amd64/i386/armhf/arm64), for example: ["amd64", "i386']
architectures = "all" # TODO : handle the "all" option (no ["all"])
multi_instance = false
ldap = false
sso = "not_relevant"
# FIXME: replace with an **estimate** minimum disk and RAM requirements. e.g. 20M, 400M, 1G... You may have have a look at CI results
disk = "50M"
ram.build = "500M"
ram.runtime = "100M"

[install]
    [install.domain]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "domain"

    [install.init_main_permission]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # This won't be saved as setting and will instead be used to initialize the SSOwat permission
    type = "group"
    default = "all_users"

    [install.language]
    ask.en = "Choose the application language"
    ask.fr = "Choisissez la langue de l'application"
    type = "select"
    choices = ['en', 'en']
    default = "en"

    [install.admin]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "user"
    [install.password]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # Note that user-provided passwords questions are not automatically saved as setting
    help.en = "Use the help field to add an information for the admin about this question."
    help.fr = "Utilisez le champ aide pour ajouter une information à l'intention de l'administrateur à propos de cette question."
    type = "password"
	
	[install.minio_domain]
	type = "domain"
	ask.en = "Domain for MinIO app, used for file storage. If not yet installed, it will automatically be. MinIO has to be installed at the root."
	ask.fr = "Domaine pour l'application MinIO, utilisé pour le stockage des fichiers. S'il n'est pas encore installé, il le sera automatiquement. MinIO doit être installé à la racine."
	
	[install.minio_admin]
	type = "user"
	ask.en = "Administrator for MinIO app, used for images and attachments storage. Please note that if MinIO is already installed, that setting won't be used."
	ask.fr = "Administrateur pour l'application MinIO, utilisée pour le stockage des images et des pièces jointes. Veuillez noter que si MinIO est déjà installé, ce paramètre ne sera pas utilisé."
	
	[install.minio_password]
	type = "password"
	ask.en = "Password for MinIO administrator. Please note that if MinIO is already installed, that setting won't be used."
	ask.fr = "Mot de passe pour l'administrateur MinIO. Veuillez noter que si MinIO est déjà installé, ce paramètre ne sera pas utilisé."


[resources]
    # See the packaging documentation for the full set
    # of explanation regarding the behavior and properties for each of those
    [resources.sources]

        [resources.sources.main]
        # This will pre-fetch the asset which can then be deployed during the install/upgrade scripts with :
        #    ynh_setup_source --dest_dir="$install_dir"
        # You can also define other assets than "main" and add --source_id="foobar" in the previous command
        url = "https://github.com/opengisch/qfieldcloud/archive/refs/tags/v0.22.2.tar.gz"
        sha256 = "f8564ce08531da5b4abe88f99995c585ffa500078d461af9d6f62a58e1cd72fc"

        # These infos are used by https://github.com/YunoHost/apps/blob/master/tools/autoupdate_app_sources/autoupdate_app_sources.py
        # to auto-update the previous asset urls and sha256sum + manifest version
        # assuming the upstream's code repo is on github and relies on tags or releases
        # See the 'sources' resource documentation for more details

        autoupdate.strategy = "latest_github_tag"
		
	[resources.system_user]
    # This will provision/deprovision a unix system user
    allow_email = true
	
    [resources.install_dir]
    # This will create/remove the install dir as /var/www/$app
    # and store the corresponding setting $install_dir
    
    [resources.data_dir]
    # This will create/remove the data dir as /home/yunohost.app/$app
    # and store the corresponding setting $data_dir
    subdirs = ['data']
	
    [resources.permissions]
    # This will configure SSOwat permission for $domain/$path/
    # The initial allowed group of user is configured via the init_main_permission question (public=visitors, private=all_users)
    main.url = "/"

    [resources.ports]
    # This will pick a random port for reverse-proxying and store it as the $port setting
    [resources.apt]
    # This will automatically install/uninstall the following apt packages
    # and implicitly define the $phpversion setting as 8.0 (if phpX.Y-foobar dependencies are listed)
    packages = "postgresql python3-pip python3-dev xvfb iputils-ping gcc glibc-tools libpq-dev binutils libproj-dev gdal-bin gettext"
    [resources.database]
	# This will automatically provision/deprovison a database and store the corresponding credentials in settings $db_user, $db_name, $db_pwd
	type = "postgresql"
